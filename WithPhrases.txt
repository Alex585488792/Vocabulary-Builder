import javax.swing.*;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.border.Border;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.awt.event.*;
import java.awt.*;

/**
 * Edit word doesn't work with replaceAll
 * Different meanings cannot be separated into lines
 * @author Alex
 *
 */
public class Main extends JFrame implements ActionListener, ChangeListener {
	private static final long serialVersionUID = 1L;
	private JPanel wordPanel, phrasePanel, statPanel, reviewPanel, dictPanel;
	private JButton btnAddWord, btnEditWord, btnDeleteWord, btnAddPhrase,
			btnEditPhrase, btnDeletePhrase, btnSearch, btnAddtoList, btnReviewAnswer;
	private DefaultTableModel modelWord, modelPhrase;
	private DateFormat df;
	private BufferedWriter out;
	private File wordFile = new File("words.txt"), phraseFile = new File(
			"phrases.txt");
	private int index = 0, noOfWords = 0, noOfPhrases = 0;
	private Object value;
	private JTable wordTable, phraseTable;
	private JTextField wordTF, phoneticSymTF, wordSearchTF;
	private JTextArea meaningTA, searchResultsTA;
	private JLabel wordReview;
	private JTabbedPane tabbedPane;

	public static void main(String[] args) {
		new Main();
	}

	public Main() {
		// main panels
		tabbedPane = new JTabbedPane();
		tabbedPane.addChangeListener(this);
		wordPanel = new JPanel();
		wordPanel.setPreferredSize(new Dimension(500, 400));
		phrasePanel = new JPanel();
		statPanel = new JPanel();
		reviewPanel = new JPanel();
		dictPanel = new JPanel();
		// dictPanel.setLayout(new BoxLayout(dictPanel, BoxLayout.Y_AXIS));
		df = new SimpleDateFormat("dd/MM/yyyy");

		// word panel JComponents
		// JTable
		String[] wordColumnTitle = { "Word", "<html>Phonetic<br> Symbol",
				"Meaning", "<html>Level of <br>completion", "Date Added" };
		modelWord = new DefaultTableModel(1000, wordColumnTitle.length);
		modelWord.setColumnIdentifiers(wordColumnTitle);
		wordTable = new JTable(modelWord) {
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {
				return false;
			};
		};
		wordTable.getColumnModel().getColumn(0).setMinWidth(100);
		wordTable.getColumnModel().getColumn(1).setMinWidth(100);
		wordTable.getColumnModel().getColumn(2).setMinWidth(400);
		wordTable.getColumnModel().getColumn(3).setMinWidth(100);
		wordTable.getColumnModel().getColumn(4).setMinWidth(100);
		wordTable.setPreferredScrollableViewportSize(new Dimension(800, 600));
		wordTable.setFillsViewportHeight(true);
		wordTable.setPreferredSize(null);

		// read number of lines of file
		LineNumberReader lnr;
		String line;
		String[] data;
		if (wordFile.exists()) {
			try {
				lnr = new LineNumberReader(new FileReader(wordFile));
				try {
					lnr.skip(Long.MAX_VALUE);
					noOfWords = lnr.getLineNumber();
				} catch (IOException e) {
					e.printStackTrace();
				}
				try {
					lnr.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}

			// read from file
			try {
				BufferedReader in = new BufferedReader(new FileReader(wordFile));
				line = in.readLine();
				while (line != null) {
					data = line.split("::");
					modelWord.setValueAt(data[0], index, 0);
					modelWord.setValueAt(data[1], index, 2);
					modelWord.setValueAt(data[2], index, 3);
					modelWord.setValueAt(data[3], index, 4);
					index++;
					line = in.readLine();
				}
				in.close();
			} catch (IOException e) {
				System.err.println("IOException: " + e.getMessage());
			}
		}

		// set header height
		JTableHeader header = wordTable.getTableHeader();
		header.setPreferredSize(new Dimension(100, 40));

		wordTF = new JTextField(15);
		phoneticSymTF = new JTextField(15);
		meaningTA = new JTextArea(3, 3);

		btnAddWord = new JButton("Add");
		btnAddWord.setFocusable(false);
		btnAddWord.addActionListener(this);
		btnEditWord = new JButton("Edit");
		btnEditWord.setFocusable(false);
		btnEditWord.addActionListener(this);
		btnDeleteWord = new JButton("Delete");
		btnDeleteWord.setFocusable(false);
		btnDeleteWord.addActionListener(this);

		// Phrase panel JComponents
		// JTable
		String[] phraseColumnTitle = { "Phrase", "<html>Phonetic<br> Symbol",
				"Meaning", "<html>Level of <br>completion", "Date Added" };
		modelPhrase = new DefaultTableModel(1000, phraseColumnTitle.length);
		modelPhrase.setColumnIdentifiers(phraseColumnTitle);
		phraseTable = new JTable(modelPhrase) {
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {
				return false;
			};
		};
		phraseTable.getColumnModel().getColumn(0).setMinWidth(100);
		phraseTable.getColumnModel().getColumn(1).setMinWidth(100);
		phraseTable.getColumnModel().getColumn(2).setMinWidth(400);
		phraseTable.getColumnModel().getColumn(3).setMinWidth(100);
		phraseTable.getColumnModel().getColumn(4).setMinWidth(100);
		phraseTable.setPreferredScrollableViewportSize(new Dimension(800, 600));
		phraseTable.setFillsViewportHeight(true);
		phraseTable.setPreferredSize(null);

		// read number of lines of file
		if (phraseFile.exists()) {
			try {
				lnr = new LineNumberReader(new FileReader(phraseFile));
				try {
					lnr.skip(Long.MAX_VALUE);
					noOfPhrases = lnr.getLineNumber();
				} catch (IOException e) {
					e.printStackTrace();
				}
				try {
					lnr.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}

			// read from file
			try {
				index = 0;
				BufferedReader in = new BufferedReader(new FileReader(
						phraseFile));
				line = in.readLine();
				while (line != null) {
					data = line.split("::");
					modelPhrase.setValueAt(data[0], index, 0);
					modelPhrase.setValueAt(data[1], index, 2);
					modelPhrase.setValueAt(data[2], index, 3);
					modelPhrase.setValueAt(data[3], index, 4);
					index++;
					line = in.readLine();
				}
				in.close();
			} catch (IOException e) {
				System.err.println("IOException: " + e.getMessage());
			}
		}

		// set header height
		JTableHeader header2 = phraseTable.getTableHeader();
		header2.setPreferredSize(new Dimension(100, 40));

		btnAddPhrase = new JButton("Add");
		btnAddPhrase.setFocusable(false);
		btnAddPhrase.addActionListener(this);
		btnEditPhrase = new JButton("Edit");
		btnEditPhrase.setFocusable(false);
		btnEditPhrase.addActionListener(this);
		btnDeletePhrase = new JButton("Delete");
		btnDeletePhrase.setFocusable(false);
		btnDeletePhrase.addActionListener(this);

		// Statistics panel JComponents
		JLabel statLabel = new JLabel("STATSTICS");
		statLabel.setFont(new Font("Times new Roman", Font.BOLD, 72));
		statLabel.setAlignmentX(CENTER_ALIGNMENT);
		// Dictionary panel JComponents
		JLabel dictionaryLabel = new JLabel("DICTIONARY");
		dictionaryLabel.setFont(new Font("Times new Roman", Font.BOLD, 72));
		dictionaryLabel.setAlignmentX(CENTER_ALIGNMENT);
		wordSearchTF = new JTextField(30);
		wordSearchTF.setMinimumSize(new Dimension(600, 50));
		wordSearchTF.setPreferredSize(new Dimension(600, 50));
		wordSearchTF.setFont(new Font("Calibri", Font.PLAIN, 24));
		wordSearchTF.setAlignmentX(CENTER_ALIGNMENT);
		searchResultsTA = new JTextArea();
		searchResultsTA.setFont(new Font("MS Song", Font.PLAIN, 24));
		searchResultsTA.setPreferredSize(new Dimension(750, 500));
		searchResultsTA.setMaximumSize(new Dimension(700, 500));
		btnSearch = new JButton("Search");
		btnSearch.addActionListener(this);
		btnAddtoList = new JButton("Add to list");
		btnAddtoList.setPreferredSize(new Dimension(250, 30));
		btnAddtoList.addActionListener(this);
		btnAddtoList.setEnabled(false);
		// Review panel JComponents
		JLabel reviewQ = new JLabel("What is the meaning of this word?");
		reviewQ.setFont(new Font("Times new Roman", Font.PLAIN, 56));
		wordReview = new JLabel("word");
		wordReview.setFont(new Font("Times new Roman", Font.BOLD, 72));
		btnReviewAnswer = new JButton("Show answer");
		btnReviewAnswer.setFont(new Font("Times new Roman", Font.BOLD, 72));
		btnReviewAnswer.setPreferredSize(new Dimension(800, 400));
		btnReviewAnswer.addActionListener(this);

		wordPanel.add(btnAddWord);
		wordPanel.add(btnEditWord);
		wordPanel.add(btnDeleteWord);
		wordPanel.add(new JScrollPane(wordTable,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		phrasePanel.add(btnAddPhrase);
		phrasePanel.add(btnEditPhrase);
		phrasePanel.add(btnDeletePhrase);
		phrasePanel.add(new JScrollPane(phraseTable,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		statPanel.add(statLabel);
		dictPanel.add(dictionaryLabel);
		dictPanel.add(Box.createVerticalStrut(20));
		dictPanel.add(wordSearchTF);
		dictPanel.add(btnSearch);
		dictPanel.add(btnAddtoList);
		dictPanel.add(Box.createVerticalStrut(20));
		dictPanel.add(searchResultsTA);
		reviewPanel.add(reviewQ);
		reviewPanel.add(Box.createVerticalStrut(30));
		reviewPanel.add(wordReview);
		reviewPanel.add(Box.createVerticalStrut(30));
		reviewPanel.add(btnReviewAnswer);
		tabbedPane.addTab("Dictionary", dictPanel);
		tabbedPane.add("Word", wordPanel);
		tabbedPane.addTab("Phrases", phrasePanel);
		tabbedPane.addTab("Stats", statPanel);
		tabbedPane.addTab("Review", reviewPanel);

		setTitle("Vocabulary Builder");
		add(tabbedPane);
		setSize(900, 800);
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnAddWord) {
			wordTF.setEnabled(true);
			index = 0;
			wordTF.setText("");
			phoneticSymTF.setText("");
			meaningTA.setText("");
			Border border = BorderFactory.createLineBorder(Color.BLACK);
			meaningTA.setBorder(BorderFactory.createCompoundBorder(border,
					BorderFactory.createEmptyBorder(10, 10, 10, 10)));
			Object[] addingWords = { "Word:", wordTF, "Phonetic symbol",
					phoneticSymTF, "Meaning:", meaningTA };
			int option = JOptionPane.showConfirmDialog(null, addingWords,
					"Add a word", JOptionPane.OK_CANCEL_OPTION);
			String word = wordTF.getText();
			String phoneticSymbol = phoneticSymTF.getText();
			String meaning = meaningTA.getText();
			if (option == 0) {
				if (word.length() == 0 || meaning.length() == 0) {
					JOptionPane.showMessageDialog(null,
							"You did not input word/meaning!",
							"Vocabulary Builder",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					noOfWords++;
					do {
						value = modelWord.getValueAt(index, 0);
						if (value == null) {
							modelWord.setValueAt(word, index, 0);
							modelWord.setValueAt(phoneticSymbol, index, 1);
							modelWord.setValueAt(meaning, index, 2);
							modelWord.setValueAt(0, index, 3);
							modelWord.setValueAt(df.format(new Date()), index,
									4);
						}
						index++;
					} while (value != null);
					try {
						out = new BufferedWriter(new FileWriter(wordFile, true));
						out.write(word + "::" + meaning + "::"
								+ 0 + "::" + df.format(new Date()));
						out.newLine();
						out.close();
					} catch (IOException f) {
						JOptionPane.showMessageDialog(null, f.getMessage()
								+ "!", "Error", JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		} else if (e.getSource() == btnEditWord) {
			index = wordTable.getSelectedRow();
			if (index >= 0) {
				String oldMeaning = modelWord.getValueAt(index, 2).toString();
				wordTF.setEnabled(false);
				wordTF.setText(modelWord.getValueAt(index, 0).toString());
				if (modelWord.getValueAt(index, 1) != null) {
					phoneticSymTF.setText(modelWord.getValueAt(index, 1)
							.toString());
				} else {
					phoneticSymTF.setText("");
				}
				meaningTA.setText(modelWord.getValueAt(index, 2).toString());
				Border border = BorderFactory.createLineBorder(Color.BLACK);
				meaningTA.setBorder(BorderFactory.createCompoundBorder(border,
						BorderFactory.createEmptyBorder(10, 10, 10, 10)));
				Object[] addingWords = { "Word:", wordTF, "Phonetic symbol",
						phoneticSymTF, "Meaning:", meaningTA };
				int option = JOptionPane.showConfirmDialog(null, addingWords,
						"Edit a word", JOptionPane.OK_CANCEL_OPTION);
				String word = wordTF.getText();
				String phoneticSymbol = phoneticSymTF.getText();
				String meaning = meaningTA.getText();
				if (option == 0) {
					if (word.length() == 0 || meaning.length() == 0) {
						JOptionPane.showMessageDialog(null,
								"You did not input word/meaning!",
								"Vocabulary Builder",
								JOptionPane.INFORMATION_MESSAGE);
					} else {
						modelWord.setValueAt(word, index, 0);
						modelWord.setValueAt(phoneticSymbol, index, 1);
						modelWord.setValueAt(meaning, index, 2);
						Path path = Paths.get("words.txt");
						Charset charset = StandardCharsets.UTF_8;

						// replacing strings in file
						String content = null;
						try {
							content = new String(Files.readAllBytes(path),
									charset);
						} catch (IOException e1) {
							e1.printStackTrace();
						}
						content = content.replaceAll(oldMeaning, meaning);
						try {
							Files.write(path, content.getBytes(charset));
						} catch (IOException e1) {
							e1.printStackTrace();
						}
					}
				}
			}
		} else if (e.getSource() == btnDeleteWord) {
			index = wordTable.getSelectedRow();
			File temp = null;
			try {
				temp = File.createTempFile("file", ".txt",
						wordFile.getParentFile());
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			if (index >= 0) {
				// remove the word from table
				for (int i = index; i < noOfWords; i++) {
					modelWord.setValueAt(modelWord.getValueAt(i + 1, 0), i, 0);
					modelWord.setValueAt(modelWord.getValueAt(i + 1, 1), i, 1);
					modelWord.setValueAt(modelWord.getValueAt(i + 1, 2), i, 2);
					modelWord.setValueAt(modelWord.getValueAt(i + 1, 3), i, 3);
					modelWord.setValueAt(modelWord.getValueAt(i + 1, 4), i, 4);
				}
				// remove the word from file
				String line = "null";
				try {
					int i = 0;
					BufferedReader in = new BufferedReader(new FileReader(
							wordFile));
					BufferedWriter out = new BufferedWriter(
							new FileWriter(temp));
					while (line != null) {
						line = in.readLine();
						if (index != i) {
							if (line != null) {
								out.write(line);
								out.newLine();
							}
						}
						i++;
					}
					in.close();
					out.close();
				} catch (IOException f) {
					System.err.println("IOException: " + f.getMessage());
				}
				wordFile.delete();
				temp.renameTo(wordFile);
			}
		}

		if (e.getSource() == btnAddPhrase) {
			wordTF.setEnabled(true);
			index = 0;
			wordTF.setText("");
			phoneticSymTF.setText("");
			meaningTA.setText("");
			Border border = BorderFactory.createLineBorder(Color.BLACK);
			meaningTA.setBorder(BorderFactory.createCompoundBorder(border,
					BorderFactory.createEmptyBorder(10, 10, 10, 10)));
			Object[] addingPhrases = { "Phrase:", wordTF, "Phonetic symbol",
					phoneticSymTF, "Meaning:", meaningTA };
			int option = JOptionPane.showConfirmDialog(null, addingPhrases,
					"Add a phrase", JOptionPane.OK_CANCEL_OPTION);
			String phrase = wordTF.getText();
			String phoneticSymbol = phoneticSymTF.getText();
			String meaning = meaningTA.getText();
			if (option == 0) {
				if (phrase.length() == 0 || meaning.length() == 0) {
					JOptionPane.showMessageDialog(null,
							"You did not input phrase/meaning!",
							"Vocabulary Builder",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					noOfPhrases++;
					do {
						value = modelPhrase.getValueAt(index, 0);
						if (value == null) {
							modelPhrase.setValueAt(phrase, index, 0);
							modelPhrase.setValueAt(phoneticSymbol, index, 1);
							modelPhrase.setValueAt(meaning, index, 2);
							modelPhrase.setValueAt(0, index, 3);
							modelPhrase.setValueAt(df.format(new Date()),
									index, 4);
						}
						index++;
					} while (value != null);
					try {
						out = new BufferedWriter(new FileWriter(phraseFile,
								true));
						out.write(phrase + "::" + meaning + "::"
								+ 0 + df.format(new Date()));
						out.newLine();
						out.close();
					} catch (IOException f) {
						JOptionPane.showMessageDialog(null, f.getMessage()
								+ "!", "Error", JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		} else if (e.getSource() == btnEditPhrase) {
			index = phraseTable.getSelectedRow();
			if (index >= 0) {
				String oldMeaning = modelPhrase.getValueAt(index, 2).toString();
				wordTF.setEnabled(false);
				wordTF.setText(modelPhrase.getValueAt(index, 0).toString());
				if (modelPhrase.getValueAt(index, 1) != null) {
					phoneticSymTF.setText(modelPhrase.getValueAt(index, 1)
							.toString());
				} else {
					phoneticSymTF.setText("");
				}
				meaningTA.setText(modelPhrase.getValueAt(index, 2).toString());
				Border border = BorderFactory.createLineBorder(Color.BLACK);
				meaningTA.setBorder(BorderFactory.createCompoundBorder(border,
						BorderFactory.createEmptyBorder(10, 10, 10, 10)));
				Object[] addingPhrases = { "Phrase:", wordTF,
						"Phonetic symbol", phoneticSymTF, "Meaning:", meaningTA };
				int option = JOptionPane.showConfirmDialog(null, addingPhrases,
						"Edit a Phrase", JOptionPane.OK_CANCEL_OPTION);
				String phrase = wordTF.getText();
				String phoneticSymbol = phoneticSymTF.getText();
				String meaning = meaningTA.getText();
				if (option == 0) {
					if (phrase.length() == 0 || meaning.length() == 0) {
						JOptionPane.showMessageDialog(null,
								"You did not input phrase/meaning!",
								"Vocabulary Builder",
								JOptionPane.INFORMATION_MESSAGE);
					} else {
						modelPhrase.setValueAt(phrase, index, 0);
						modelPhrase.setValueAt(phoneticSymbol, index, 1);
						modelPhrase.setValueAt(meaning, index, 2);

						// replacing strings in file
						Path path = Paths.get("phrases.txt");
						Charset charset = StandardCharsets.UTF_8;
						String content = null;
						try {
							content = new String(Files.readAllBytes(path),
									charset);
						} catch (IOException e1) {
							e1.printStackTrace();
						}
						content = content.replaceAll(oldMeaning, meaning);
						try {
							Files.write(path, content.getBytes(charset));
						} catch (IOException e1) {
							e1.printStackTrace();
						}
					}
				}
			}
		} else if (e.getSource() == btnDeletePhrase) {
			index = phraseTable.getSelectedRow();
			File temp = null;
			try {
				temp = File.createTempFile("file", ".txt",
						phraseFile.getParentFile());
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			if (index >= 0) {
				// remove the phrase from table
				for (int i = index; i < noOfPhrases; i++) {
					modelPhrase.setValueAt(modelPhrase.getValueAt(i + 1, 0), i,
							0);
					modelPhrase.setValueAt(modelPhrase.getValueAt(i + 1, 1), i,
							1);
					modelPhrase.setValueAt(modelPhrase.getValueAt(i + 1, 2), i,
							2);
					modelPhrase.setValueAt(modelPhrase.getValueAt(i + 1, 3), i,
							3);
					modelPhrase.setValueAt(modelPhrase.getValueAt(i + 1, 4), i,
							4);
				}
				// remove the phrase from file
				String line = "null";
				try {
					int i = 0;
					BufferedReader in = new BufferedReader(new FileReader(
							wordFile));
					BufferedWriter out = new BufferedWriter(
							new FileWriter(temp));
					while (line != null) {
						line = in.readLine();
						if (index != i) {
							if (line != null) {
								out.write(line);
								out.newLine();
							}
						}
						i++;
					}
					in.close();
					out.close();
				} catch (IOException f) {
					System.err.println("IOException: " + f.getMessage());
				}
				phraseFile.delete();
				temp.renameTo(phraseFile);
			}
		} else if (e.getSource() == btnSearch) {
			searchResultsTA.setText("");
			btnAddtoList.setEnabled(true);
			String s = "";
			boolean meaningFound = false;
			s = wordSearchTF.getText();
			// Pattern space = Pattern.compile("\\s");
			// Matcher matcherSpace = space.matcher(s);
			// boolean found = matcherSpace.find();
			// System.out.println(found);
			try {
				URL oracle = new URL("http://dict.cn/" + s);
				BufferedReader in = new BufferedReader(new InputStreamReader(
						oracle.openStream()));
				String inputLine;
				Pattern patternPartOfSpeech = Pattern
						.compile("<li><span>(.*?)</span>");
				Pattern patternMeaning = Pattern
						.compile("<strong>(.*?)</strong");
				while ((inputLine = in.readLine()) != null) {
					if (inputLine.contains("<li><span>")) {
						inputLine = inputLine.trim();
						Matcher matcher = patternPartOfSpeech
								.matcher(inputLine);
						while (matcher.find() && !meaningFound) {
							searchResultsTA.append(matcher.group(1) + " ");
						}
						matcher = patternMeaning.matcher(inputLine);
						while (matcher.find() && !meaningFound) {
							searchResultsTA.append(matcher.group(1));
							meaningFound = true;
						}
					}
				}
				meaningFound = false;
				in.close();
			} catch (MalformedURLException f) {} 
			catch (IOException g) {}

		} else if (e.getSource() == btnAddtoList) {
			btnAddtoList.setEnabled(false);
			noOfWords++;
			do {
				value = modelWord.getValueAt(index, 0);
				if (value == null) {
					modelWord.setValueAt(wordSearchTF.getText(), index, 0);
					modelWord.setValueAt(searchResultsTA.getText(), index, 2);
					modelWord.setValueAt(df.format(new Date()), index, 4);
				}
				if (value != null) {
					index++;
				}
			} while (value != null);
			try {
				out = new BufferedWriter(new FileWriter(wordFile, true));
				out.write(modelWord.getValueAt(index, 0) + "::"
						+ modelWord.getValueAt(index, 2) + "::"
						+ modelWord.getValueAt(index, 4));
				out.newLine();
				out.close();
			} catch (IOException f) {
				JOptionPane.showMessageDialog(null, f.getMessage() + "!",
						"Error", JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	@Override
	public void stateChanged(ChangeEvent arg0) {
		if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals("Review")) {
			
		}
	}
}
